import { createSlice } from '@reduxjs/toolkit';

export const teamsSlice = createSlice({
  name: 'teams',
  initialState: {
    playerA: '',
    playerB: '',
    teamsArray: [               //set to empty array as default; pre-filled for testing (list copied from below)
    {teamName: 'mol / sorum',
    playerA: 'mol',
    playerB: 'sorum',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'ehlers / wickler',
    playerA: 'ehlers',
    playerB: 'wickler',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'ahman / helvig',
    playerA: 'ahman',
    playerB: 'helvig',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'boermans / de groot',
    playerA: 'boermans',
    playerB: 'de groot',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'ahmed / cherif',
    playerA: 'ahmed',
    playerB: 'cherif',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'dalhausser / lucena',
    playerA: 'dalhausser',
    playerB: 'lucena',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'alisson / alvaro',
    playerA: 'alisson',
    playerB: 'alvaro',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0},
  {teamName: 'stoyanovsky / krasilnikov',
    playerA: 'stoyanovsky',
    playerB: 'krasilnikov',
    gamesWon: 0,
    gamesLost: 0,
    setsFor: 0,
    setsAgainst: 0,
    pointsFor: 0,
    pointsAgainst: 0}
    ],
    isFormVisible: true
  },
  reducers: {
    setPlayerA: (state, action) => {
      state.playerA = action.payload;
    },
    setPlayerB: (state, action) => {
      state.playerB = action.payload;
    },
    addTeam: (state) => {
      const newTeam = {
        teamName: `${state.playerA} / ${state.playerB}`,
        playerA: state.playerA,
        playerB: state.playerB,
        gamesWon: 0,
        gamesLost: 0,
        setsFor: 0,
        setsAgainst: 0,
        pointsFor: 0,
        pointsAgainst: 0
      };
      state.teamsArray.push(newTeam);
      state.playerA = ''; // Clear playerA after submission
      state.playerB = ''; // Clear playerB after submission
  },
  removeTeam: (state, action) => {
    state.teamsArray = state.teamsArray.filter((team) => team.teamName !== action.payload);    // Define logic to remove a team
  },
  clearTeams: (state) => {
    state.teamsArray = [];
  },
  toggleFormVisibility: (state) => {
    state.isFormVisible = !state.isFormVisible;
  }
}});

export const { setPlayerA, setPlayerB, addTeam, removeTeam, clearTeams, toggleFormVisibility } = teamsSlice.actions;

export default teamsSlice.reducer;


// dummy teams to copy
// {teamName: 'mol / sorum',
//   playerA: 'mol',
//   playerB: 'sorum',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'ehlers / wickler',
//   playerA: 'ehlers',
//   playerB: 'wickler',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'ahman / helvig',
//   playerA: 'ahman',
//   playerB: 'helvig',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'partain / benesh',
//   playerA: 'partain',
//   playerB: 'benesh',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'ahmed / cherif',
//   playerA: 'ahmed',
//   playerB: 'cherif',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'dalhausser / lucena',
//   playerA: 'dalhausser',
//   playerB: 'lucena',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'alisson / alvaro',
//   playerA: 'alisson',
//   playerB: 'alvaro',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0},
// {teamName: 'stoyanovsky / krasilnikov',
//   playerA: 'stoyanovsky',
//   playerB: 'krasilnikov',
//   gamesWon: 0,
//   gamesLost: 0,
//   setsFor: 0,
//   setsAgainst: 0,
//   pointsFor: 0,
//   pointsAgainst: 0}